name: Test & Build

on:
  pull_request:
    branches: [dev]

jobs:
  build:
    name: üê≥ Build docker image
    runs-on: ubuntu-latest
    env:
      APP_GROUP: judilibre
      APP_HOST: search.judilibre.local
      APP_ID: judilibre-search
      APP_NODES: 1
      APP_PORT: 443
      API_PORT: 8080
      APP_SCHEME: https
      APP_SELF_SIGNED: true
      DOCKER_USERNAME: opendatajustice
      ELASTIC_INDEX: judilibre_0
      ELASTIC_NODES: 1
      ELASTIC_MEM: 1024Mi
      ELASTIC_MEM_JVM: 512m
      ELASTIC_STORAGE_POLICY: DeleteOnScaledownAndClusterDeletion
      ELASTIC_STORAGE_SIZE: 3Gi
      KUBE_TYPE: k3s
      KUBE_ZONE: local
      START_TIMEOUT: 120
    steps:
      - uses: actions/checkout@v1
      - name: extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | sed 's|^refs/heads/||;' | sed 's/[^a-zA-Z0-9]/-/g')"
        id: extract_branch
      - name: init deps
        run: ./scripts/init_deps.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
      - name: get version
        run: echo "##[set-output name=version;]$(./scripts/version.sh)"
        id: extract_version
      - name: üêã Check if build is needed
        run: |
          ./scripts/check_install.sh
          echo "##[set-output name=status;]$(./scripts/docker-check.sh || echo build_needed)"
        id: docker_check
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: unit test
        if: steps.docker_check.outputs.status == 'build_needed'
        run: npm ci && npm run test
      - name: üêã Build the master docker image
        if: steps.docker_check.outputs.status == 'build_needed'
        run: ./scripts/docker-build.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: ‚ò∏Ô∏è  Deploy local k8s services
        if: steps.docker_check.outputs.status == 'build_needed'
        run: ./scripts/deploy_k8s_services.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: ‚úÖ Execute minimal tests
        if: steps.docker_check.outputs.status == 'build_needed'
        run: |
          export KUBE_NAMESPACE=${APP_GROUP}-${KUBE_ZONE}-${GIT_BRANCH}
          kubectl get pods --namespace=${KUBE_NAMESPACE}
          kubectl logs service/${APP_ID}-svc --namespace=${KUBE_NAMESPACE}
          ./scripts/test_minimal.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          KUBECONFIG: /home/runner/.kube/config-local-k3s.yaml
