name: Deploy

on:
  workflow_dispatch:
  push:
    branches: [dev, master]

jobs:
  build:
    name: üê≥ Build docker image
    runs-on: ubuntu-latest
    env:
      APP_GROUP: judilibre
      APP_HOST: search.judilibre.local
      APP_ID: judilibre-search
      APP_NODES: 1
      APP_PORT: 443
      API_PORT: 8080
      APP_SCHEME: https
      APP_SELF_SIGNED: true
      DOCKER_USERNAME: opendatajustice
      ELASTIC_INDEX: judilibre_0
      ELASTIC_NODES: 1
      ELASTIC_MEM: 1024Mi
      ELASTIC_MEM_JVM: 512m
      ELASTIC_STORAGE_POLICY: DeleteOnScaledownAndClusterDeletion
      ELASTIC_STORAGE_SIZE: 3Gi
      KUBE_TYPE: k3s
      KUBE_ZONE: local
      START_TIMEOUT: 120
    steps:
      - uses: actions/checkout@v1
      - name: extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | sed 's|^refs/heads/||;' | sed 's/[^a-zA-Z0-9]/-/g')"
        id: extract_branch
      - name: init deps
        run: ./scripts/init_deps.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
      - name: get version
        run: echo "##[set-output name=version;]$(./scripts/version.sh)"
        id: extract_version
      - name: üêã Check if build is needed
        run: |
          ./scripts/check_install.sh
          echo "##[set-output name=status;]$(./scripts/docker-check.sh || echo build_needed)"
        id: docker_check
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: unit test
        if: steps.docker_check.outputs.status == 'build_needed'
        run: npm ci && npm run test
      - name: üêã Build the master docker image
        if: steps.docker_check.outputs.status == 'build_needed'
        run: ./scripts/docker-build.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: ‚ò∏Ô∏è  Deploy local k8s services
        if: steps.docker_check.outputs.status == 'build_needed'
        run: ./scripts/deploy_k8s_services.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: ‚úÖ Execute minimal tests
        if: steps.docker_check.outputs.status == 'build_needed'
        run: |
          export KUBE_NAMESPACE=${APP_GROUP}-${KUBE_ZONE}-${GIT_BRANCH}
          kubectl get pods --namespace=${KUBE_NAMESPACE}
          kubectl logs service/${APP_ID}-svc --namespace=${KUBE_NAMESPACE}
          ./scripts/test_minimal.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          KUBECONFIG: /home/runner/.kube/config-local-k3s.yaml
      - name: üöÄ Push docker image
        if: (steps.docker_check.outputs.status == 'build_needed') && (github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master')
        run: |
          echo "${DOCKER_TOKEN}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker push ${DOCKER_USERNAME}/${APP_ID}:${VERSION};
          docker tag ${DOCKER_USERNAME}/${APP_ID}:${VERSION} ${DOCKER_USERNAME}/${APP_ID}:${GIT_BRANCH}
          docker push ${DOCKER_USERNAME}/${APP_ID}:${GIT_BRANCH}
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
  deploy-scw-dev:
    name: üöÄ Deploy, update on Scaleway (dev on fr-par-1) ‚ò∏Ô∏è
    needs: build
    if: github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    env:
      ACME: acme
      APP_GROUP: judilibre
      APP_HOST: search.dev-par1.judilibre.io
      APP_HOST_ALTER: search.dev.judilibre.io
      APP_ID: judilibre-search
      APP_NODES: 1
      APP_SCHEME: https
      APP_PORT: 443
      API_PORT: 8080
      API_VERBOSITY: debug
      DOCKER_USERNAME: opendatajustice
      ELASTIC_INDEX: judilibre_0
      ELASTIC_NODES: 3
      ELASTIC_MEM: 2048Mi
      ELASTIC_MEM_JVM: 1024m
      ELASTIC_SEARCH_PASSWORD: ${{ secrets.ELASTIC_SEARCH_PASSWORD }}
      ELASTIC_STORAGE_POLICY: DeleteOnScaledownOnly
      ELASTIC_STORAGE_SIZE: 20Gi
      HTTP_PASSWD: ${{ secrets.HTTP_PASSWD }}
      KUBE_INGRESS: nginx
      KUBE_NAMESPACE: judilibre-scw-dev-par1-dev
      KUBE_SERVICES_FORCE_UPDATE: ${{ secrets.KUBE_SERVICES_FORCE_UPDATE }}
      KUBE_TYPE: k8s
      KUBE_ZONE: scw-dev-par1
      SCW_ZONE: fr-par-1
      SCW_KUBE_NODES: 1
      START_TIMEOUT: 240
    steps:
      - uses: actions/checkout@v1
      - name: extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | sed 's|^refs/heads/||;' | sed 's/[^a-zA-Z0-9]/-/g')"
        id: extract_branch
      - name: init deps
        run: ./scripts/init_deps.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
      - name: get version
        run: echo "##[set-output name=version;]$(./scripts/version.sh)"
        id: extract_version
      - name: kube prerequisites
        run: |
          mkdir -p ${HOME}/.kube
          cat k8s/kubeconfig.yaml | envsubst > ~/.kube/config
        env:
          KUBE_CA: ${{ secrets.KUBE_SCW_CA }}
          KUBE_NAME: ${{ secrets.KUBE_SCW_NAME }}
          KUBE_TOKEN: ${{ secrets.KUBE_SCW_TOKEN }}
          KUBE_URL: ${{ secrets.KUBE_SCW_URL }}
          KUBE_USER: ${{ secrets.KUBE_SCW_USER }}
      - name: üöÄ Update remote kube services (if needed) ‚ò∏Ô∏è
        run: ./scripts/deploy_k8s_services.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üöÄ Update remote app ‚ò∏Ô∏è
        run: |
          ./scripts/update_app.sh
          kubectl get pods --namespace=${KUBE_NAMESPACE}
          kubectl logs service/${APP_ID}-svc --namespace=${KUBE_NAMESPACE}
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          START_TIMEOUT: 30
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üßπ Clean old replicas ‚ò∏Ô∏è
        run: ./scripts/clean_old_replicas.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
  deploy-scw-prod-par1:
    name: üöÄ Deploy, update on Scaleway (master on prod fr-par-1) ‚ò∏Ô∏è
    needs: build
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      ACME: acme
      APP_GROUP: judilibre
      APP_HOST: search.prod-par1.judilibre.io
      APP_HOST_ALTER: search.judilibre.io
      APP_ID: judilibre-search
      APP_NODES: 1
      APP_SCHEME: https
      APP_PORT: 443
      API_PORT: 8080
      DOCKER_USERNAME: opendatajustice
      ELASTIC_INDEX: judilibre_0
      ELASTIC_NODES: 3
      ELASTIC_MEM: 12288Mi
      ELASTIC_MEM_JVM: 6144m
      ELASTIC_SEARCH_PASSWORD: ${{ secrets.ELASTIC_SEARCH_PASSWORD_PROD }}
      ELASTIC_STORAGE_POLICY: DeleteOnScaledownOnly
      ELASTIC_STORAGE_SIZE: 20Gi
      HTTP_PASSWD: ${{ secrets.HTTP_PASSWD_PROD }}
      KUBE_INGRESS: nginx
      KUBE_NAMESPACE: judilibre-scw-prod-par1-master
      KUBE_SERVICES_FORCE_UPDATE: ${{ secrets.KUBE_SERVICES_FORCE_UPDATE }}
      KUBE_TYPE: k8s
      KUBE_ZONE: scw-prod-par1
      SCW_ZONE: fr-par-1
      SCW_KUBE_NODES: 3
      START_TIMEOUT: 240
      SCW_COCKPIT_API_KEY: ${{ secrets.SCW_COCKPIT_API_KEY }}
      SCW_LOG_BUCKET: ${{ secrets.SCW_LOG_BUCKET_NEW_NAME }}
      SCW_KUBE_PROJECT_NAME: judilibre-prod
      SCW_LOG_ACCESS_KEY: ${{ secrets.SCW_LOG_ACCESS_KEY }}
      SCW_LOG_SECRET_KEY: ${{ secrets.SCW_LOG_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v1
      - name: extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | sed 's|^refs/heads/||;' | sed 's/[^a-zA-Z0-9]/-/g')"
        id: extract_branch
      - name: init deps
        run: ./scripts/init_deps.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
      - name: get version
        run: echo "##[set-output name=version;]$(./scripts/version.sh)"
        id: extract_version
      - name: kube prerequisites
        run: |
          mkdir -p ${HOME}/.kube
          cat k8s/kubeconfig.yaml | envsubst > ~/.kube/config
        env:
          KUBE_CA: ${{ secrets.KUBE_SCW_CA_PROD_PAR1 }}
          KUBE_NAME: ${{ secrets.KUBE_SCW_NAME_PROD_PAR1 }}
          KUBE_TOKEN: ${{ secrets.KUBE_SCW_TOKEN_PROD_PAR1 }}
          KUBE_URL: ${{ secrets.KUBE_SCW_URL_PROD_PAR1 }}
          KUBE_USER: ${{ secrets.KUBE_SCW_USER_PROD_PAR1 }}
      - name: üöÄ Update remote kube services (if needed) ‚ò∏Ô∏è
        run: ./scripts/deploy_k8s_services.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üöÄ Update remote app ‚ò∏Ô∏è
        run: |
          ./scripts/update_app.sh
          kubectl get pods --namespace=${KUBE_NAMESPACE}
          kubectl logs service/${APP_ID}-svc --namespace=${KUBE_NAMESPACE}
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          START_TIMEOUT: 20
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üßπ Clean old replicas ‚ò∏Ô∏è
        run: ./scripts/clean_old_replicas.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
  deploy-scw-prod-par2:
    name: üöÄ Deploy, update on Scaleway (master on prod fr-par-2) ‚ò∏Ô∏è
    needs: deploy-scw-prod-par1
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      ACME: acme
      APP_GROUP: judilibre
      APP_HOST: search.prod-par2.judilibre.io
      APP_HOST_ALTER: search.judilibre.io
      APP_ID: judilibre-search
      APP_NODES: 1
      APP_SCHEME: https
      APP_PORT: 443
      API_PORT: 8080
      DOCKER_USERNAME: opendatajustice
      ELASTIC_INDEX: judilibre_0
      ELASTIC_NODES: 3
      ELASTIC_MEM: 12288Mi
      ELASTIC_MEM_JVM: 6144m
      ELASTIC_SEARCH_PASSWORD: ${{ secrets.ELASTIC_SEARCH_PASSWORD_PROD }}
      ELASTIC_STORAGE_POLICY: DeleteOnScaledownOnly
      ELASTIC_STORAGE_SIZE: 20Gi
      HTTP_PASSWD: ${{ secrets.HTTP_PASSWD_PROD }}
      KUBE_INGRESS: nginx
      KUBE_NAMESPACE: judilibre-scw-prod-par2-master
      KUBE_SERVICES_FORCE_UPDATE: ${{ secrets.KUBE_SERVICES_FORCE_UPDATE }}
      KUBE_TYPE: k8s
      KUBE_ZONE: scw-prod-par2
      SCW_ZONE: fr-par-2
      SCW_KUBE_NODES: 3
      START_TIMEOUT: 240
      SCW_COCKPIT_API_KEY: ${{ secrets.SCW_COCKPIT_API_KEY }}
      SCW_LOG_BUCKET: ${{ secrets.SCW_LOG_BUCKET_NEW_NAME }}
      SCW_KUBE_PROJECT_NAME: judilibre-prod
      SCW_LOG_ACCESS_KEY: ${{ secrets.SCW_LOG_ACCESS_KEY }}
      SCW_LOG_SECRET_KEY: ${{ secrets.SCW_LOG_SECRET_KEY }}
    steps:
      - uses: actions/checkout@v1
      - name: extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF} | sed 's|^refs/heads/||;' | sed 's/[^a-zA-Z0-9]/-/g')"
        id: extract_branch
      - name: init deps
        run: ./scripts/init_deps.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
      - name: get version
        run: echo "##[set-output name=version;]$(./scripts/version.sh)"
        id: extract_version
      - name: kube prerequisites
        run: |
          mkdir -p ${HOME}/.kube
          cat k8s/kubeconfig.yaml | envsubst > ~/.kube/config
        env:
          KUBE_CA: ${{ secrets.KUBE_SCW_CA_PROD_PAR2 }}
          KUBE_NAME: ${{ secrets.KUBE_SCW_NAME_PROD_PAR2 }}
          KUBE_TOKEN: ${{ secrets.KUBE_SCW_TOKEN_PROD_PAR2 }}
          KUBE_URL: ${{ secrets.KUBE_SCW_URL_PROD_PAR2 }}
          KUBE_USER: ${{ secrets.KUBE_SCW_USER_PROD_PAR2 }}
      - name: üöÄ Update remote kube services (if needed) ‚ò∏Ô∏è
        run: ./scripts/deploy_k8s_services.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üöÄ Update remote app ‚ò∏Ô∏è
        run: |
          export KUBE_NAMESPACE=${APP_GROUP}-${KUBE_ZONE}-${GIT_BRANCH}
          ./scripts/update_app.sh
          kubectl get pods --namespace=${KUBE_NAMESPACE}
          kubectl logs service/${APP_ID}-svc --namespace=${KUBE_NAMESPACE}
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          START_TIMEOUT: 20
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üßπ Clean old replicas ‚ò∏Ô∏è
        run: ./scripts/clean_old_replicas.sh
        env:
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
          VERSION: ${{ steps.extract_version.outputs.version }}
