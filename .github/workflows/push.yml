name: Publish Docker image

on: [push]

jobs:
  build:
    name: üê≥ Build docker image
    runs-on: ubuntu-latest
    env:
      APP_ID: judilibre-search
      API_PORT: 8080
      DOCKER_USERNAME: opendatajustice
    steps:
      - uses: actions/checkout@v1
      - name: get version
        run: echo "##[set-output name=version;]$(cat package.json | jq -r '.version')-$(git rev-parse --short HEAD)"
        id: extract_version
      - name: extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: üêã Build the master docker image
        run: docker build --build-arg API_PORT=${API_PORT} --target production -t ${DOCKER_USERNAME}/${APP_ID}:${VERSION} .
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: üèÅ Start local service
        run: docker run --name ${APP_ID} -d -p ${API_PORT}:${API_PORT} ${DOCKER_USERNAME}/${APP_ID}:${VERSION}
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
      - name: ‚úÖ Execute minimal tests
        run: |
          docker ps
          ./scripts/wait_service.sh
          docker logs ${APP_ID}
          ./scripts/test_minimal.sh
        env:
          SCHEME: http
          HOST: localhost
      - name: üöÄ Push docker image
        if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
        run: |
          echo "${DOCKER_TOKEN}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
          docker push ${DOCKER_USERNAME}/${APP_ID}:${VERSION};
          docker tag ${DOCKER_USERNAME}/${APP_ID}:${VERSION} ${DOCKER_USERNAME}/${APP_ID}:$(echo ${GIT_BRANCH} | tr '/' '-')
          docker push ${DOCKER_USERNAME}/${APP_ID}:$(echo ${GIT_BRANCH} | tr '/' '-')
        env:
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}
          VERSION: ${{ steps.extract_version.outputs.version }}
          GIT_BRANCH: ${{ steps.extract_branch.outputs.branch }}
  deploy:
    name: üöÄ Deploy ‚ò∏Ô∏è
    needs: build
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      APP_ID: judilibre-search
      API_PORT: 8080
      DOCKER_USERNAME: opendatajustice
    steps:
      - uses: actions/checkout@v1
      - name: get version
        run: echo "##[set-output name=version;]$(cat package.json | jq -r '.version')-$(git rev-parse --short HEAD)"
        id: extract_version
      - name: kube prerequisites
        run: |
          sudo apt-get install -yq gettext
          curl -sLO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mkdir ~/.kube
          cat k8s/kubeconfig.yaml | envsubst > ~/.kube/config
        env:
          KUBE_USER: ${{ secrets.KUBE_USER }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
          KUBE_URL: ${{ secrets.KUBE_URL }}
          KUBE_CA: ${{ secrets.KUBE_CA }}
      - name: üöÄ update ‚ò∏Ô∏è
        run: |
          ./kubectl set image deployments/${APP_ID}-deployment ${APP_ID}=${DOCKER_USERNAME}/${APP_ID}:${VERSION}
          ./scripts/test_minimal.sh || (kubectl rollout undo deployments/${APP_ID}-deployment && exit 1)
        env:
          VERSION: ${{ steps.extract_version.outputs.version }}
          SCHEME: https
          HOST: search.judilibre.io
          API_PORT: 443